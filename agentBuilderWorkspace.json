{"nodes":[{"width":98,"height":36,"id":"1","type":"rootNode","position":{"x":0,"y":0},"deletable":false,"data":{"nodeTypeName":"Root Node","nodeTypeDescription":"This is the Root Node, from which the rest of the graph is built.","label":"Root Node"},"positionAbsolute":{"x":0,"y":0}},{"width":167,"height":52,"id":"2","type":"sequenceNode","position":{"x":-34.012213527724484,"y":84.16672818536964},"deletable":false,"data":{"isConnectableTarget":false,"nodeTypeName":"Sequence Node","nodeTypeDescription":"This is the starting point for your bot's Behavior Tree logic.","label":"Top Level Sequence Node"},"positionAbsolute":{"x":-34.012213527724484,"y":84.16672818536964},"selected":false,"dragging":false},{"width":121,"height":52,"id":"5","type":"conditionNode","position":{"x":-196.65873849116514,"y":181.03121748924215},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"If the bot is active","prompt":"Return success if the bot exists - otherwise, return null.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar bot = rgObject.GetMyPlayer();\n\treturn bot != null ? NodeStatus.Success : NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-196.65873849116514,"y":181.03121748924215},"selected":false,"dragging":false},{"width":162,"height":52,"id":"6","type":"conditionNode","position":{"x":-33.29359786389023,"y":181.20267423031598},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"If the bot is not attacking","prompt":"Return failure if the bot is currently attacking.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar playerAttack = rgObject.GetMyPlayer().GetFields<RGStateEntity_PlayerAttack>().FirstOrDefault();\n\tif(playerAttack.IsAttacking) return NodeStatus.Failure;\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-33.29359786389023,"y":181.20267423031598},"selected":false,"dragging":false},{"width":115,"height":52,"id":"7","type":"selectorNode","position":{"x":277.998252486671,"y":179.18383736932353},"data":{"subType":null,"displayName":"Selector Node","displayDescription":"Selector nodes execute children in order until one of them returns Success or all children return Failure. This is like an OR operator.","label":"Attack OR Move","prompt":"","code":""},"positionAbsolute":{"x":277.998252486671,"y":179.18383736932353},"selected":false,"dragging":false},{"width":129,"height":52,"id":"8","type":"sequenceNode","position":{"x":102.183531108728,"y":261.09119805829505},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Move logic","prompt":"","code":""},"positionAbsolute":{"x":102.183531108728,"y":261.09119805829505},"selected":false,"dragging":false},{"width":163,"height":52,"id":"10","type":"conditionNode","position":{"x":2.3925905588983767,"y":360.5131973623981},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"If not near target location","prompt":"If we are not within one unit of the target destination, or have no target destination (set within a Vector2 field called \"targetDestination\"), return failure.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar player = rgObject.GetMyPlayer();\n\tVector2? targetDestination = GetData<Vector2?>(\"targetDestination\");\n\tif (targetDestination == null)\n\t{\n\t\tvar _random = new System.Random();\n\t\ttargetDestination = new Vector2(_random.Next(-2, 6), _random.Next(2, 9));\n\t\tSetData(\"targetDestination\", targetDestination);\n\t\treturn NodeStatus.Success;\n\t}\n\tvar targetVec3 = new Vector3(targetDestination.Value.x, 0, targetDestination.Value.y);\n\tDebug.Log(RG.MathFunctions.DistanceSq(player.position, targetVec3));\n\tif (RG.MathFunctions.DistanceSq(player.position, targetVec3) <= 1)\n\t{\n\t\tClearData(\"targetDestination\");\n\t\trgObject.PerformAction(new RGActionRequest(\"MoveInDirection\", new Dictionary<string, object> { { \"newMoveDirection\", Vector2.zero } }));\n\t\treturn NodeStatus.Failure;\n\t}\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":2.3925905588983767,"y":360.5131973623981},"selected":true,"dragging":false},{"width":102,"height":52,"id":"11","type":"actionNode","position":{"x":182.09676342868568,"y":359.76461596042685},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Move to target","prompt":"Move in the direction of the target (stored as a Vector2 in a field called \"targetDestination\"). First check if there is no targetDestination, and if there is not, create on with the following params:\nx = _random.Next(-2, 6);\n= _random.Next(2, 9);","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar player = rgObject.GetMyPlayer();\n\tvar playerPos = new Vector2(player.position.x, player.position.z);\n\tvar targetDestination = GetData<Vector2?>(\"targetDestination\");\n\tvar direction = (targetDestination.Value - playerPos).normalized;\n\trgObject.PerformAction(new RGActionRequest(\"MoveInDirection\", new Dictionary<string, object> { { \"newMoveDirection\", direction } }));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":182.09676342868568,"y":359.76461596042685},"selected":false,"dragging":false},{"width":119,"height":52,"id":"13","type":"actionNode","position":{"x":387.57396765117556,"y":276.48707243540355},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Attack the enemy","prompt":"Attack the closest enemy.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar myPlayer = rgObject.GetMyPlayer();\n\tvar nearestEnemy = rgObject.FindNearestEntityByName(\"Enemy\", position: myPlayer.position);\n\tif (nearestEnemy == null)\n\t\treturn NodeStatus.Failure;\n\tvar actionParams = new Dictionary<string, object> { { \"enemyId\", nearestEnemy.id }, { \"ability\", 0 } };\n\trgObject.PerformAction(new RGActionRequest(\"SelectAndAttackEnemy\", actionParams));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":387.57396765117556,"y":276.48707243540355},"selected":false,"dragging":false}],"edges":[{"animated":true,"id":"e1-2","source":"1","target":"2","deletable":false},{"animated":true,"id":"5","source":"2","target":"5","selected":false},{"animated":true,"id":"6","source":"2","target":"6"},{"animated":true,"id":"7","source":"2","target":"7"},{"animated":true,"id":"8","source":"7","target":"8"},{"animated":true,"id":"10","source":"8","target":"10"},{"animated":true,"id":"11","source":"8","target":"11"},{"animated":true,"id":"13","source":"7","target":"13"}],"viewport":{"x":186.5790699879655,"y":83.02633449657213,"zoom":0.8819207640914447}}