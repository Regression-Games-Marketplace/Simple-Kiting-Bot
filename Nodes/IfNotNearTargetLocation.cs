/// <auto-generated>
/// This file was generated by the Regression Games Agent Builder.
/// If you modify it and resynchronize with Regression Games, your changes may be lost.
/// Use the Agent Builder on https://regression.gg to modify this file.
/// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using RegressionGames.BehaviorTree;
using RegressionGames.RGBotLocalRuntime;
using RegressionGames.StateActionTypes;
using UnityEngine;

namespace SimpleKitingN
{
    public class IfNotNearTargetLocation : ConditionNode
    {
        public IfNotNearTargetLocation() : base("If not near target location")
        {
        }

        /**
         * Generated from prompt:
         * If we are not within one unit of the target destination, or have no target destination (set within a Vector2 field called "targetDestination"), return failure.
         */
        protected override NodeStatus Execute(RG rgObject)
        {
        	var player = rgObject.GetMyPlayer();
        	Vector2? targetDestination = GetData<Vector2?>("targetDestination");
        	if (targetDestination == null)
        	{
        		var _random = new System.Random();
        		targetDestination = new Vector2(_random.Next(-2, 6), _random.Next(2, 9));
        		SetData("targetDestination", targetDestination);
        		return NodeStatus.Success;
        	}
        	var targetVec3 = new Vector3(targetDestination.Value.x, 0, targetDestination.Value.y);
        	Debug.Log(RG.MathFunctions.DistanceSq(player.position, targetVec3));
        	if (RG.MathFunctions.DistanceSq(player.position, targetVec3) <= 1)
        	{
        		ClearData("targetDestination");
        		rgObject.PerformAction(new RGActionRequest("MoveInDirection", new Dictionary<string, object> { { "newMoveDirection", Vector2.zero } }));
        		return NodeStatus.Failure;
        	}
        	return NodeStatus.Success;
        }
    }
}