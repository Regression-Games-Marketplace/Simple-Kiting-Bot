/// <auto-generated>
/// This file was generated by the Regression Games Agent Builder.
/// If you modify it and resynchronize with Regression Games, your changes may be lost.
/// Use the Agent Builder on https://regression.gg to modify this file.
/// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using RegressionGames.BehaviorTree;
using RegressionGames.RGBotLocalRuntime;
using RegressionGames.StateActionTypes;
using UnityEngine;

namespace SimpleKitingN
{
    public class MoveToTarget : ActionNode
    {
        public MoveToTarget() : base("Move to target")
        {
        }

        /**
         * Generated from prompt:
         * Move in the direction of the target (stored as a Vector2 in a field called "targetDestination"). First check if there is no targetDestination, and if there is not, create on with the following params:
x = _random.Next(-2, 6);
= _random.Next(2, 9);
         */
        protected override NodeStatus Execute(RG rgObject)
        {
        	var player = rgObject.GetMyPlayer();
        	var playerPos = new Vector2(player.position.x, player.position.z);
        	var targetDestination = GetData<Vector2?>("targetDestination");
        	var direction = (targetDestination.Value - playerPos).normalized;
        	rgObject.PerformAction(new RGActionRequest("MoveInDirection", new Dictionary<string, object> { { "newMoveDirection", direction } }));
        	return NodeStatus.Success;
        }
    }
}